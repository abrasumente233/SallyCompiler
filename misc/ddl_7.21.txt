
- 要做哪些优化？

2021/7/20之前整完！

沙子
1. 循环交换/融合/展开

梨子
1. 求余常数，可以化为乘和加。特例：求余2，直接&1 √
2. 数组访问用 lsl #2，不要乘4了 √
3. 函数内联，内联的策略是？参数很多，要内联的函数很短
4. 强度削弱，场景？对性能影响大吗？√
a * 4 -> a << 2
a * 7 -> (a << 3) - a
a / 32767 -> (a >> 15) + (a >> 30)
乘法只将因子为2的幂次的运算改为左移
除法和求余运算常数为除数的情况都优化了

7.14
添加了两种特殊乘数因子的乘法优化

5. 程序调用图 

优化在哪里做？
1. 函数内联
	- AST？直接把要内联的AST接到调用者函数，开始给参数赋值，最后把return删除。总感觉有点奇怪
	- IR？
2. 求余常数
	- AST？可千万不要在AST做
	- 在IR优化？
	- 在汇编优化？


酱紫
1. GVN/GCM，aka公共子表达式删除，（和copy propagation）
2. 寄存器分配优化
	i.   溢出到内存时，千千万万不要把循环内的变量溢出到内存
	ii.  不同类型的变量load策略？全局变量的地址spill出去了怎么办？局部数组的起始地址spill出去怎么办？不应该spill这些？还是就算spill了，也不要分配额外的栈空间。
	iii. 起始地址为sp+0的数组可以直接用sp表示，节省一个寄存器？在哪里做？asm opt，eliminate identity expression？
	iv.  把r12，lr当通用寄存器 √
3. 死代码消除 √ 待测试
4. 常量折叠/传播 √ 待测试
5. 自动化性能测试 √
6. 循环不变量外提 √

椰子
1. 全局数组，可能是常量，带入到函数里面可以进行常量折叠。
	- 找到所有没有写入操作的全局数组，标记为常量数组
	- 用神奇的方法把常量写进IR
2. 看一下递归的优化？把递归去掉会有性能提升吗

------------------------------------------------------

- 性能分析

1. 自动化性能测试
baseline：咱们没优化过的编译结果，gcc -O3，clang -O3，gcc -O2，clang -O2

2. 热点分析
找出样例里最耗时的部分（via profiling），针对其优化

3. 对比
找出我们程序里最耗时的部分，看clang，gcc做得怎么样

4. 指令级分析
可以用llvm-mca分析程序的执行所需周期

5. 手动优化
如循环展开，可以先手动展开康康效果
再如除以常数，手动改汇编康康效果

------------------------------------------------------


下周搞

1. 指令调度

------------------------------------------------------

也许要做，但是还要多了解一下的：

其它可以做的优化，根据分析的结果权衡做：

1. 除以常数，可以不用sdiv
2. 局部数组外提成全局，可能可以省掉初始化的步骤
3. 全局变量局部化，每次修改时可以不用取内存值。此条优化只针对普通全局变量，数组全局变量的地址从函数开始就存在寄存器中。
4. 尾递归优化，递归函数的inlining
5. 向量化
6. 全0初始化, memset？

？？？？？bitset里x数组初始化了两次？

------------------------------------------------------

九个性能测试，粗略一看

bitset：
1. 生成rand后除余常数，也许可以优化
2. %2优化
3. 重复使用a[pos / bitcount]等，可以删除公共子表达式
4. 除以常数可以不用sdiv
5. 乘以2的幂优化，或者，a * 7 -> (a << 3) - a这种

mm：
1. 数组初始为0可以优化成memset？有影响吗
2. 循环展开？怎么展开，只展开最内层？都展开？

mv1：
1. 初始化0，memset
2. 循环展开

sort1：
1. 求余变量可以优化吗
2. 递归，尾递归优化？
3. 小函数内联

spmv：
1. xptr[i + 1]，将i+1外提
2. 循环融合

conv：
1. memmove，循环展开后指令调度？是应该RRRRWWWW还是RWRWRWRW
2. c/2，优化。
3. convn函数四重循环调用了reduce好多次？可以把reduce内联吗
4. getvalue可以内联
5. 好像没什么特别的优化，可以用clang -O3看一下？

fft：
除了递归没啥特别的?

median0：
1. meanless_computation，优化掉，内联进来然后死代码消除

shuffle0：
1. 内联hash

