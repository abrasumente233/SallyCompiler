
int main(int n, int m) {
    f(m, n);
    return n/m;
}

/*

//const int len = 20;

void intcomb(int n, int m) {
    //int len1 = len;
    //int len2 = len;
    //starttime();
    //putint(n + 1 + 1);
    //putint(len1 + len2 - 1);
    //putint(1 + n + 1);
    putint(n+1+n+1);
    putint((n + 1) + (m + 1));
    putint(-------n);
    putint(2*n*3);
    putint(n / 2 /2);
    //stoptime();
}

int A = 3;
int seed[3] = {1,2,3};

int div(int n) {
    return A*n + n/seed[n];
}

int mem_copy_prop() {
    int x[16];

    x[0] = 1;
    x[1] = 1+x[0]*x[0];

}

int head[16];
int tail[16];
int cnt[16];

int mem_ssa_order_preserve() {
    int i = 0;
    if (i > 0) {
        head[i] = tail[i-1];
        tail[i] = head[i] + cnt[i];
    }
    i=i+1;
    head[i] = tail[i-1];
    tail[i] = head[i] + cnt[i];
    i=i+1;
    head[i] = tail[i-1];
    tail[i] = head[i] + cnt[i];
}

int mem_copy_prop() {
    i = 0;
    head[i] = tail[i-1];
    tail[i] = head[i] + cnt[i];
    i=i+1;

    head[i] = tail[i-1];
    tail[i] = head[i] + cnt[i];

}


int a[100];
int b[100][100];
int c[100][100];

void use_tmp(int n) {
    int i,j;
    i = 0;
    while(i < n) {
        j = 0;
        while(j < n) {
            a[i] = a[i] + b[i][j]*c[i][j];
            j = j + 2;
        }
        i = i + 1;
    }
    putint(a[0]);
}


void base(int n, int A[][30]) {
    int i, j;
    i = 0;
    while(i < n) {
        while(j < n) {
            putint(A[i][j]);
            j = j + 1;
        }
        i = i + 1;
    }
}

int A[3][3];
int B[3][3];
int C[3];

void vectorize(int n) {

    int i = 0;
    int j = 0;
    while(j < n) {
        i = 0;
        while(i < n) {
            C[i] = C[i] + A[j][i] * B[j][i];
            i = i + 1;
        }
        j = j + 1;
    }

}


int h(int a) {
    return a*2;
}

int g(int A[], int n) {
    A[0] = 1;
    return h(n);
}

int b[3];

int f() {
    g(b, 2);

    f();
    return 2;
}

int A[600][600][600] = {};
//int A[5] = {};
int n;
int array[110];
int main() {
  int t, m;
  int a, b;
  t = 1;
  while (t) {
    t = t - 1;
    n = 4;
    m = 10;
    int i = 0;
    int flag = 0;
    init(n);
    int k = n * n + 1;

    while (i < m) {
      a = getint();
      b = getint();

      if (!flag) {
        int loc = n * (a - 1) + b;

        array[loc] = loc;
        if (a == 1) {
          array[0] = 0;
          mmerge(loc, 0);
        }
        if (a == n) {
          array[k] = k;
          mmerge(loc, k);
        }
        if (b < n && array[loc + 1] != -1) {
          mmerge(loc, loc + 1);
        }
        if (b > 1 && array[loc - 1] != -1) {
          mmerge(loc, loc - 1);
        }
        if (a < n && array[loc + n] != -1) {
          mmerge(loc, loc + n);
        }
        if (a > 1 && array[loc - n] != -1) {
          mmerge(loc, loc - n);
        }

<<<<<<< HEAD
=======
        if (array[0] != -1 && array[k] != -1 && findfa(0) == findfa(k)) {
          flag = 1;
          int tmp = i + 1;
          putint(tmp);
          putch(10);
        }
      }

      i = i + 1;
    }
    if (!flag) {
      putint(-1);
      putch(10);
    }
  }
  return 0;
}
/*
int doubleWhile() {
  int i;
  i = 5;
  int j;
  j = 7;
  while (i < 100) {
    i = i + 30;
    while(j < 100){
      j = j + 6;
    }
    j = j - 100;
  }
  return (j);
}

int main() {
  return doubleWhile();
}


>>>>>>> unroll2
int median(int arr[], int begin, int end, int pos){
    int pivot = arr[begin];

    int l = begin;
    int r = end + 1;
    int xx = 0;
    while (1 == 1){
        while (l < r){
		    r = r - 1;
		    if(l < pivot){
			    //putint(l);
                break;
			}
            xx = xx + 1;
        }
            
        if (l == r) break;
        putint(l);
    }

    return xx;
}
int d1(int a) {
    return a/1;
}

int if_else() {
    int a = 5;

    if (a == -5) {
        return 4;
    } else {
        return 23;
    }
}

int phi(int a) {
    int i = 0;
    if (5) {
        i = 2;
    } else {
        i = 3;
    }
    return i;
}

int f(int x1, int x2, int x3, int x4, int x5) {
    if (x1 > 2) {
        x5 = x5 + 1;
    }
    return x5;
}

int main(int B[3]) {
    int i = 0;
    int sum = 0;
    int n=getint();
    while(i < n) {
        sum = sum + B[0];
        i = i + 1;
    }
    B[0] = 2;
    return sum;
}

int median(int arr[], int begin, int end, int pos){
    int pivot = arr[begin];

    int l = begin;
    int r = end + 1;
    int xx = 0;
    while (1 == 1){
        while (l < r){
		    r = r - 1;
		    if(arr[r] < pivot){
			    putint(pivot);
			}
            xx = xx + 1;
        }
            
        if (l == r) break;
        else {
            putint(l);
        }
    }
    arr[begin] = pivot;
    putint(l);

    return xx;
}


int block_placement() {
    int A[3] = {1,2,3};
    int i = 0;
    while (i < 3) {
        if (i == 2) break;
        i = i + 1;
    }

    return A[i];
}

int dead_loop() {

    int i = 0;

    while(1) {
        if (i > 5) continue;
        i = i + 1;
    }

    return i;

}

int memdep(int a[], int n, int pos) {
    int x[10];
    x[0] = 1;
    int i = 1;
    while(i < 10) {
        x[i] = i;
        i = i + 1;
    }

    if (a[x[0]] > 0) {
        return 1;
    } else {
        return 0;
    }
}

int A[4];
int B[3];

int memdep(int n) {
    int i = 0;
    while(i != 0) {
        if (i > 5) {
            B[i*2] = 2;
        }
        i = A[i];
    }
}

int A = 3;

int f() {
    return A;
}

void f(int a, int b, int c) {
    int arr[3][2] = {};

    while(g(a, b, c) != 5) {
        arr[2][2] = 3;
    }

    return arr[2][1];
}
int g(int a, int b, int c) {
    return a + b + c;
}


int a = 3;
void mem_bug() {

    if (f() || f()+1) {
        putint(a);
    }

}

int f() {
    a = a+1;
    return a;
}


void f() {
    if (16 >= (3 - (2+1))) {
        putch(65);
    }
}

int g() {
    int i = 0, j = 0;
    while(i>5) {
        while(j > 5) {
            putint(5);
            i=i+1;
        }
        j = j + 1;
    }
    while(i>5) {
        while(j > 5) {
            putint(5);
            i=i+1;
        }
        while(j > 5) {
            putint(5);
            i=i+1;
        }
        j = j + 1;
    }
    return i;
}


int f(int n) {
    return n*2147483647;
}

>>>>>>> master

int A[3];
int B[3];



int main() {
    int i = 0;
    int sum = 0;
    int n=getint();
    while(i < n) {
        sum = sum + B[0];
        i = i + 1;
    }
    B[0] = 2;
    return sum;
}



int isdigit(int x) {
    int a[3] = {};
    if (x >= 48 && x <= 57)
        return 1;
    return 0;
}

int spill(int A[]) {
    int i = 0, sum = 0;
    int x1 = getint();
    int x2 = getint();
    int x3 = getint();
    int x4 = getint();
    int x5 = getint();
    int x6 = getint();
    int x7 = getint();
    int x8 = getint();
    int x9 = getint();
    int x10 = getint();
    int x11 = getint();
    int x12 = getint();

    while(i < 5) {
        sum = sum + x1 + A[i];
        i = i + 1;
    }


    putint(x1);
    putint(x2);
    putint(x3);
    putint(x4);
    putint(x5);
    putint(x6);
    putint(x7);
    putint(x8);
    putint(x9);
    putint(x10);
    putint(x11);
    putint(x12);
    putint(sum);
}
int gcm_arg(int x1, int x2, int x3, int x4, int x5) {
    int i = 0;
    int sum = 0;
    while(i < x1) {
        sum = sum + x5;

    }
    return sum;
}



int A[5];

int memdep(int n) {
    //A[0] = 1;
    int a = A[0];
    if (n > 5) {
        f(1);
    } else {
        f(2);
    }
    f(3);

    return a+A[0];
}

void f(int n) { A[0] = n; }
int A[5];
int B[5];

int glo_ref_gvn() {
    int i = 0;
    int sum = 0;
    int t = A[0];
    A[0] = 1;
    while(i < 5) {
        sum = sum + f();
        //sum = sum + A[0];
        i = i + 2;
    }
    return A[0]+B[0]+t+sum;
}

int f() { return 0; }
*/

/*

int A[5];

int read() {
    int a = A[0];
    A[1] = 2;
    int b = A[0];
    return a + b;
}

*/
/*
=======

>>>>>>> 24e119e7c226c4b3c89370ec4795753a4df852cd
int N = 4;
int A[5];

int glo_ref_gvn() {
    int i = 0;
    int sum = 0;
    while(-i) {
        if (-i) sum = sum + A[i];
        sum = sum + A[i];
        i = i + 1;
    }
    return sum;
}

int gvn(int a) {
    int t;
    if (a > 3) {
        t = 0+a;
    } else {
        t = a*2;
    }
    return t;
}

int main(){
    int i=0,sum=0;
    while(i<=1){
        i=i+3;
        sum=sum+i;
    }

}
void test_if(int a) {
    if (a > 3) {
        return a+3;
    } else if (a > 6) {
        return a+4;
    } else {
        return 0;
    }
    return a;
}
*/

/*

const int N = 5;



int f() {
    const int a = 2147483647-2147483648;

    if (-2147483648){
        return 0;
    }

    return a;
}

int f() {
    int a[25];
    int n = getarray(a);
    putint(n);
    return n;
}

int arm(int a) {
    putint(-5);
    if (--!a && 1) {
        return a;
    }
    putint(-2147483648);
    return -2147483648;
}

int square(int x) {
    return x*x;
}

int f(int n) {
    if (n <= 2) return 1;
    return f(n-1) + f(n-2);
}

>>>>>>> fd71e3016de6512510d4180d835134c94f79a9ba
int B[5];
int C[5][5];

int side(int A[]) {
    int cc[3] = {};
    int cc2[3][3] = {};
    f();
    -g();
    1-h();
    A[i()];
    f(B);
    f(C[2]);
    f(cc);
    f(cc2[3]);
    while ((f() || g()) && !(1+!h())) {
        putint(44);
    }
}

const int A[3][3][3] = {{1,2,3}, {{4}, {5}}, {3}};
const int B[3][3][3] = {
    A[0][0][0],
    A[0][0][1],
    A[0][0][2],
    A[0][1][0],
    A[0][1][1],
    A[0][1][2],
    A[0][2][0],
    A[0][2][1],
    A[0][2][2],
    A[1][0][0],
    A[1][0][1],
    A[1][0][2],
    A[1][1][0],
    A[1][1][1],
    A[1][1][2],
    A[1][2][0],
    A[1][2][1],
    A[1][2][2],
    A[2][0][0],
    A[2][0][1],
    A[2][0][2],
    A[2][1][0],
    A[2][1][1],
    A[2][1][2],
    A[2][2][0],
    A[2][2][1],
    A[2][2][2]
};
const int N = A[1][1][0];


int a = 3; int try_override_arg(int a) {
    {
        int a = a*3;
        return a;
    }
    return a;
}

int main() {
    ;;
    f();
    return 0;
}

const int A[3][3] = {1, 2, 3};

int test_global(int x1, int x2, int x3, int x4, int x5) {
    int sum = 0;
    while(x5 > 0) {
        sum = sum+ A[1][x5];
        x5 = x5 - 1;
    }
    return sum;
}

int side() {
    int x = 0, y = 1;
    if (-x || -+-+! -y) {
        return 1;
    }
    return 0;
}

int a1;
int a2;
int a3;
int a4;
int a5;
int a6;
int a7;
int a8;
int a9;
int a10;
int a11;
int a12;
int a13;
int a14;
int a15;
int a16;
int a17;
int a18;
int a19;
int a20;
int a21;
int a22;
int a23[10][10];

int spill_global() {
    return a1 + a2 + a3 + a4 + a5 + a6 + a7 + a8 + a9 + a10 + a11 + a12 + a13 + a14 + a15 + a16 + a17 + a18 + a19 + a20 + a21 + a22 + sum_1d(a23[1]);
}


int sum_1d(int a[10]) {
    int sum = 0;
    return sum;
}

// pass stragne things in later arguments

int copy(int a1, int a2, int a3, int a4, int a5[], int a6, int a7, int a8, int a9, int a10, int a11, int a12, int a13, int a14, int a15) {
    if (a1 > 3) {
        a6 = 123123;
    }
    return a1+a2+a3+a4+a5[1024]+a6+a7+a8+a9+a10+a11+a12+a13+a14+a15;
}

int while_again() {
    int a = 3;
    while(1) {
        if (a > 3) {
            return 1;
        } else {
            return 2;
        }
    }

    while(1) {
        a = a - 1;
    }
    return a;
}
int x = 2, y = 3, arr[30] = {2,3,4};

int nested_loop(int a, int b) {
    int s = 0;
    while(a > 3 && b < 3) {
        while(a < 3) {
            int t = a;
            a = b;
            b = t;
        }
    }

    while(a > 3) {
        a = a-1;
        s = s + a;
    }
    return s;
}


int func(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9) {
    int b1 = getint();
    int b2 = getint();
    int b3 = getint();
    int b4 = getint();
    int b5 = getint();
    int b6 = getint();
    int b7 = getint();
    int b8 = getint();
    int b9 = getint();
    int a[3] = {1,2,3};
    return f(a1, a2, a3, a4, a5, a6, a7, a8, a9, a[0], a[1], a[2], 13, 14, 15, 16, 17, 18, 19, 20)+
    g(b1, b2, b3, b4, b5, b6, b7, b8, b9, a, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22 );
}

int cont() {
    int a = 3;
    while(a < 3 && a > 3) {
        if (a > 3) {
            if (a < 3) {
                continue;
            } else {
                a = 4;
            }
        }
    }
}
int while_test() {
    int a = 3;
    while(a < 3) {
        if (a > 3) {
            a = a*2;
        } else {
            if (a > 5) return a;
            else continue;
        }
    }
}




int bang() {
    putint(-!!!!!(-1)); putch(10);
    return 0;
}


const int base = 18;

void radix(int bitround, int a[], int l, int r) {
    int [base] = {};
    int tail[base] = {};
    int cnt[base] = {};
}

int while_test2() {
    int a = 3;
    while(a < 3) {
        if (a > 3) {
            continue;
        } else {
            continue;
        }
    }
}

int ret5() {
    int a = 0;
    if (a > 0) {
        if (a < 44) {
            return 0;
        } else {
            return 1;
        }
    } else {
        return 1;
    }
    return a;
}

int ret4() {
    int a = 0;
    while(1) {
        a = a+1;
        if (a == 1 == 0) {
            break;
        } else {
            break;
        }
    }
}
int ret3() {
    int a = 0;
    if (a == 1 == 0) {
        if (a == 3) {
            return 44;
        } else {
            return 55;
        }
        a = 2*2;
    } else if (a > 1) {
        return 4;
    } else {
        return 2;
    }
    a = a*2;
    return a;
}
*/
/*
int ret2() {
    int k = 0;
    while(k < 5) {
        return k;
    }
}

int ret() {
    int k = 1;
    if (k > 0) {
        k = 2;
    } else if (k > 1) {
        return k-1;
    } else {
        return k-2;
    }
    return k*2;
}


int ret_non_eq() {
    return 1!=0;
}


int more_const() {
    int a = 0;
    if (a == 1 == 0) {
        return 1;
    } else {
        return 0;
    }
}

int new_offset_calc(int A[20][10][5]) {
    return A[10][5];
}

int A[30][30][30][30][30]={{1}, {2}, {{3}, {4}}};

int f() { putint(10); putch(10); return 1; }

void negate() {
    A[f()][g()][h()][i()][k()];
    foo(f(), g());
    int x = 1, y = 0;
    //if (!x > !y) {
    if (-x && -+-+-+-!+-+y) {
        return 1;
    } else {
        return 0;
    }
}

void empty() {
    while(1) {
        if (1) {

        } else {

        }
    }
}


void void_return(int n) {
    int i = 0;
    while(i < n) {
        if (f(i)) return;
        i = i + 1;
    }
}

void init_list() {
    int k[3][3] = {1, 2, 3, 4};
    return k[0][2];
}

int g(int n) {
    putint(1); putch(10);
    return n < 8;
}

int f(int n) {
    putint(2); putch(10);
    return n < 5;
}

int short_circuit() {
    int i = getint(), j = getint();
    while(f(i) && g(j)) {
        if (f(i) || g(j)) {
            i = i + g(j) + f(i);
        } else {
            j = j + g(j) + f(i);

        }
    }
}
*/


/*
const int N = 10;
int A[300][300][20] = {N*2, N*3, N*4};
int C[3000] = {N, N-1};

int long_array2() {
    int B[3100];
    return A[15][123][2] + B[231] + C[2999];
}

int literal() {
    int a = 0xa;
    int b = 0123;
    int c = 0Xb;
    int d = 0xB;
    return a + b + c + d;
}

int foo = 44;

int foo() {
    {
        putint(foo); putch(10);
        foo = 1;
        putint(foo); putch(10);
    }
    int foo = 2;
    putint(foo); putch(10);
    foo = 30;

    {
        int foo = 3;
        putint(foo); putch(10);
    }
}

void nested_loop(int A[][5], int B[][5]) {
    int i = 0, j = 0;
    int a = i * -5;
    while(i < 5) {
        while(j < 5) {
            B[j][i] = A[i][j];
            j=j+1;
        }
        i=i+1;
    }
}

int init_list_var() {
    int a[4] = {1, 2, 3};
    int b[1234] = {(a[1]+1)/2};
    return b[5];
}

int x1 = 1;
int x2 = 1;
int x3 = 1;
int x4 = 1;
int x5 = 1;
int x6 = 1;
int x7 = 1;
int x8 = 1;
int x9 = 1;
int x10 = 1;
int x11 = 1;
int x12 = 1;
int x13 = 1;
int x14 = 1;
int x15 = 1;
int x16 = 1;
int x17 = 1;
int x18 = 1;
int x19 = 1;
int x20 = 1;
int x21 = 1;
int x22 = 1;
int x23 = 1;
int x24 = 1;

int many_globals() {
    x1 = 3;
    x2 = 3;
    x3 = 3;
    x4 = 3;
    x5 = 3;
    x6 = 3;
    x7 = 3;
    x8 = 3;
    x9 = 3;
    x10 = 3;
    x11 = 3;
    x12 = 3;
    x13 = 3;
    x14 = 3;
    x15 = 3;
    x16 = 3;
    x17 = 3;
    x18 = 3;
    x19 = 3;
    x20 = 3;
    x21 = 3;
    x22 = 3;
    x23 = 3;
    x24 = 3;
}
int no_ret(int a) {
    a = 3; 
}
int huge_array() {
    int A[12345];
    return A[3];
}
int div_1(int a) {
    return a / -1;
}

int many_params(int x1, int x2, int x4, int x5, int x6, int x7, int x8, int x9, int x10, int x11, int x12, int x13, int x14, int x15, int x16, int x17, int x18, int x19, int x20, int x21, int x22) {
    return x1+x2+x9+x4+x5+x6+x7+x8+x22;
}

int short(int a, int b) {
    if (3 && (a+b)) {
        return a;
    }
    return a * 2;
}
int N = 5;

int func(int A[][4][4][4][4]) {
    int x2 = A[1][2][3][4];
    int x3 = A[1][2][3][4];
    int x4 = A[1][2][3][4];
    int x5 = A[1][2][3][4];
    int x6 = A[1][2][3][4];
    int x7 = A[1][2][3][4];
    int x8 = A[1][2][3][4];
    int x9 = A[1][2][3][4];
    int x10 = A[1][2][3][4];
    int x11 = A[1][2][3][4];
    int x12 = A[1][2][3][4];
    int x13 = A[1][2][3][4];
    int x14 = A[1][2][3][4];
    int x15 = A[1][2][3][4];
    int x16 = A[1][2][3][4];
    int x17 = A[1][2][3][4];
    int x18 = A[1][2][3][4];
    int x19 = A[1][2][3][4];
    int x20 = A[1][2][3][4];
    int x21 = A[1][2][3][4];
    int x22 = A[1][2][3][4];
    int x23 = A[1][2][3][4];
    int x24 = A[1][2][3][4];
    int x25 = A[1][2][3][4];
    int x26 = A[1][2][3][4];
    int x27 = A[1][2][3][4];
    int x28 = A[1][2][3][4];
    int x29 = A[1][2][3][4];
    int x30 = A[1][2][3][4];
    int x31 = A[1][2][3][4];
    int x32 = A[1][2][3][4];
    int x33 = A[1][2][3][4];
    int x34 = A[1][2][3][4];
    int x35 = A[1][2][3][4];
    int x36 = A[1][2][3][4];
    int x37 = A[1][2][3][4];
    int x38 = A[1][2][3][4];
    int x39 = A[1][2][3][4];
    int x40 = A[1][2][3][4];
    int x41 = A[1][2][3][4];
    int x42 = A[1][2][3][4];
    int x43 = A[1][2][3][4];
    int x44 = A[1][2][3][4];
    int x45 = A[1][2][3][4];
    int x46 = A[1][2][3][4];
    int x47 = A[1][2][3][4];
    int x48 = A[1][2][3][4];
    int x49 = A[1][2][3][4];
    int x50 = A[1][2][3][4];
    int x51 = A[1][2][3][4];
    int x52 = A[1][2][3][4];
    int x53 = A[1][2][3][4];
    int x54 = A[1][2][3][4];
    int x55 = A[1][2][3][4];
    int x56 = A[1][2][3][4];
    int x57 = A[1][2][3][4];
    int x58 = A[1][2][3][4];
    int x59 = A[1][2][3][4];
    int x60 = A[1][2][3][4];
    int x61 = A[1][2][3][4];
    int x62 = A[1][2][3][4];
    int x63 = A[1][2][3][4];
    int x64 = A[1][2][3][4];
    int x65 = A[1][2][3][4];
    int x66 = A[1][2][3][4];
    int x67 = A[1][2][3][4];
    int x68 = A[1][2][3][4];
    int x69 = A[1][2][3][4];
    int x70 = A[1][2][3][4];
    int x71 = A[1][2][3][4];
    int x72 = A[1][2][3][4];
    int x73 = A[1][2][3][4];
    int x74 = A[1][2][3][4];
    int x75 = A[1][2][3][4];
    int x76 = A[1][2][3][4];
    int x77 = A[1][2][3][4];
    int x78 = A[1][2][3][4];
    int x79 = A[1][2][3][4];
    int x80 = A[1][2][3][4];
    int x81 = A[1][2][3][4];
    int x82 = A[1][2][3][4];
    int x83 = A[1][2][3][4];
    int x84 = A[1][2][3][4];
    int x85 = A[1][2][3][4];
    int x86 = A[1][2][3][4];
    int x87 = A[1][2][3][4];
    int x88 = A[1][2][3][4];
    int x89 = A[1][2][3][4];
    int x90 = A[1][2][3][4];
    int x91 = A[1][2][3][4];
    int x92 = A[1][2][3][4];
    int x93 = A[1][2][3][4];
    int x94 = A[1][2][3][4];
    int x95 = A[1][2][3][4];
    int x96 = A[1][2][3][4];
    int x97 = A[1][2][3][4];
    int x98 = A[1][2][3][4];
    int x99 = A[1][2][3][4];
    int x100 = A[1][2][3][4];
    int x101 = A[1][2][3][4];
    int x102 = A[1][2][3][4];
    int x103 = A[1][2][3][4];
    int x104 = A[1][2][3][4];
    int x105 = A[1][2][3][4];
    int x106 = A[1][2][3][4];
    int x107 = A[1][2][3][4];
    int x108 = A[1][2][3][4] + N;
    
    return x2;
}

int test_expr_short_circuit(int b) {
    int a = 5;
    if (b && func()) {
        return b;
    }
    return a;
}
int tsc(int a, int b) {
    if ((a+b) && 3) {
        return b;
    }
}

int test_block(int a) {
    ;
    ;
    return a;
}
int stress_spill() {
    int A[12345];
    int x1 = getint();
    int x2 = getint();
    int x3 = getint();
    int x4 = getint();
    int x5 = getint();
    int x6 = getint();
    int x7 = getint();
    int x8 = getint();
    int x9 = getint();
    putint(x1);
    putint(x2);
    putint(x3);
    putint(x4);
    putint(x5);
    putint(x6);
    putint(x7);
    putint(x8);
    putint(x9);
    return x1*x2;
}


int sqaure(int x) {
    return x*x;
}


// @TODO: add bx lr for void function
void basic_test() {
    int a = getint();
    putint(a);
}

int test_callee_save(int x) {
    return getint()*x;
}

int test_spill0() {
    int c = 0;
    int p = 2;
    int k = 1;
    while (k > 0 || k>0 && k<4) {
         c = p + 1;
         
         k = k + c;
         if (c > k) {
             break;
         }
    }
    return k;
}

// @note
// just can't generate mul r0, r0, #233 for armv7
//
// actually clang generates the following:
// mov r2, #233
// mul r1, r0, r2
// mov r0, r1
// bx lr
// @Investigate why
// Is it imm limitations?
int times_233(int x) {
    return x*233;
}

int test_spill() {
    int a = 0, b = 0;
    int i = 0;
    while(i < 10) {
        a = a + 2*4;
        b = b + 3;
        i = i+1;
    }
    return a+(b*2);
}

int M = 2;
int global_bug(int x) {
    if (x >= 2) {
        M = 3;
    } else {
        M = 4;
    }
    return M;
}

int N = 2;
int global_test(int n) {
    N = 3;
    return N*n;
}

int test_exchange() {
    int n = 5; int m = 3;
    int tmp = m;
    m = n;
    n = tmp;
    return m;
}



int EightWhile() {
    int g=1;
    int h=2;
    int f=3;
    int e=4;
    int a;
    a = 5;
    int b;
    int c;
    b = 6;
    c = 7;
    int d;
    d = 10;
    while (a < 20) {
        a = a + 3;
        while (b < 10) {
            b = b + 1;
            while (c == 7) {
                c = c - 1;
                while (d < 20) {
                    d = d + 3;
                    while (e > 1) {
                        e = e - 1;
                        while (f > 2) {
                            f = f - 2;
                            while (g < 3) {
                                g = g + 10;
                                while (h < 10) {
                                    h = h + 8;
                                }
                                h = h - 1;
                            }
                            g = g - 8;
                        }
                        f = f + 1;
                    }
                    e = e + 1;
                }
                d = d - 1;
            }
            c = c + 1;
        }
        b = b - 2;
    }

    return (a + (b + d) + c) - (e + d - g + h);
}
int deepWhileBr(int a, int b) {
    int c;
    c = a + b;
    while (c < 75) {
        int d;
        d = 42;
        if (c < 100) {
            c = c + d;
            if (c > 99) {
                int e;
                e = d * 2;
                continue;
                if (get_one(0) == 1) {
                    c = e * 2;
                }
            }
        }
    }
    return (c);
}
int get_mod()
{
	int a = 8;
	int b = 3;
	int c = a % b;
	return c;
}
int test_init_list() {
    int c = 0;
    int p = 1;
    int k = 3;
    while (p > 1 && k<2) {
        c = 1 + k;
        p = p + 1;
    }
    return p;
}

int test_3d(int i, int j, int k) {
    int A[9][4][3];
    return A[i];
}

void print_2d(int a[4][2]) {
    int i = 0;
    int j = 0;
    while(i<4) {
        while(j < 2) {
            if (j == 1) continue;
            j=j+1;
            putint(a[i][j]);
        }
        i=i+1;
    }
    return;
}
int test_mod(int a) {
	return a % 17;
}


int test_mul2pow(int a) {
	return a * 2;
}

int test_div(int a) {
	return a / 17;
}

int test_if0(int a) {
    if (a> 0) return a;
    return a*2;
}
int test_mod(int a) {
	return a % 3;
}

int test_spill0000(int a) {
    int x1 = getint();
    int x2 = getint();
    int x3 = getint();
    int x4 = getint();
    int x5 = getint();
    int x6 = getint();
    int x7 = getint();
    int x8 = getint();
    int x9 = getint();
    putint(x1);
    putint(x2);
    putint(x3);
    putint(x4);
    putint(x5);
    putint(x6);
    putint(x7);
    putint(x8);
    putint(x9);
    return a*1231231;
}
int convn(int kernelid, int input[], int output[], int n, int m, int c){
    int i = 0;
    int j = 0;
    int x, y, curr;
    const int true = 1;
    while (true == true){
        j = 0;
        while (true == true){
            curr = 0;
            x = i - c / 2;
            while (true == true){
                y = j - c / 2;
                while (true == true){
                    curr = reduce(kernelid, curr, getvalue(input, n, m, x, y));
                    y = y + 1;
                    if (y >= j + c / 2) break;
                }
                x = x + 1;
                if (x >= i + c / 2) break;
            }
            output[i * m + j] = 2;
            j = j + 1;
            if (j >= m) break;
        }
        i = i + 1;
        if (i >= n) break;
    }
    return 0;
}
*/

/*
int main(int a, int b) {
    {

    }

    {
        int a = 2;
    }

    {}
}



int test_if(int a, int b) {
    if (b == 1) return a % 3;
    int cur = test_if(a, b/2);
    cur = (cur + cur) % 3;
    if (cur == 2) return cur;
    else return cur+2;
}

int test_optmul(int a)
{
	int b = a % 3;
    return a+b;
}

int test_cc(int A[]) {
    return A[1];
}

int test_schedule(int A[]) {
    int i = 0;
    int sum = 0;
    while(i < 5) {
        A[i] = A[i] + 5;
        sum = sum + A[i];
        i = i + 1;
    }
    return sum;

}

int test_array(int A[]) {
    int i = 0;
    int sum = 0;
    int z =0;
    while(i < 50 ) {
        sum = sum  + 2*3+z;
        sum = sum + 1;
        sum = i;
        sum = 34;
        //A[i] = sum;
        i = i+2;
    }
    return sum;
}

int test_neg_numbers() {
    return -5;
}

int test_unary(int x) {
    int a = 3;
    if (x == -5) {
        a = !x;
    } else {
        a = -x;
    }
    return a;
}

int f = 3;
int test_while() {
    int i = 0;
    while(i < 5) {
        if (i < 3) {
            f = f + 1;
        }
        i = i+1;
    }
}
*/

/*
int test_init_list(int x) {
    int a[10] = {2, 3, x};
    putint(a[2]);
    return a[1];
}

int gcd() {
    int n = 5, m =3;
    int a;
    int b;
    a = m;
    b = n;

    int t;
    int r;

    if (m < n) {
        t = m;
        m = n;
        n = t;
    }

    r = m % n;

    // @TODO: best way to run this loop at compile-time?
    while (r != 0) {
        m = n;
        n = r;
        r = m % n;
    }

    return (a * b) / n;
}

int test_straight_line_dead_code() {
    int a = 42*32;
    int b = a;
    int c = a+b;
    a = c + 23;
    c = a + 2;
    int d = a + b;
    return d;
}

int test_dead() {
    int x = 5;
    if (x == 4) x = 2;
    return x;
    //return 2;
}

// @TODO: accessing int a[100][90] with a[1], does it give back the pointer ?
// or just raise an error (parser could do that)
int test_array(int k) {
    int a=1;
    int c =0;
    while (c < 100&&a>9&&c>0||c!=0) {

        int b = a + c;
        a = a + 1;
        a = a + 2;
        int p = a;
        test_array(p);
        if (c > 0) {
            
            a = 1;
        }
        c = 10;
    }
}


int A[10][4] = { 1,2, 3 };
int test_global44() {
    int a,b;
    A[1][2] = 2;
    a = 10;
    b = -1;
    return a + b;
}

int buf[2][100] = { 1 };


// sort [l, r)


void merge_sort(int l, int r) {

    int mid = (l + r) / 2;
    merge_sort(l, mid);
    merge_sort(mid, r);

    int i = l, j = mid, k = l;
    while (i < mid && j < r) {
        if (buf[0][i] < buf[0][j]) {
            buf[1][k] = buf[0][i];
            i = i + 1;
        }
        else {
            buf[1][k] = buf[0][j];
            j = j + 1;
        }
        k = k + 1;
    }
    while (i < mid) {
        buf[1][k] = buf[0][i];
        i = i + 1;
        k = k + 1;
    }
    while (j < r) {
        buf[1][k] = buf[0][j];
        j = j + 1;
        k = k + 1;
    }

    while (l < r) {
        buf[0][l] = buf[1][l];
        l = l + 1;
    }
}





int test_odd() {
    int x = 100;
    int sum = 0;
        if ((x <0)&&(x>0)&&(x!=1)||(x<=sum)&&(sum>=2)||(x==5)) {
            sum = sum + x;
            int b = (x > 0 || getint())+x;
        }
        else {
            sum = sum + 2 * x;
        }
        
    return sum;
}

int d(int x) {
    int a = getint();
    return a + x;
}

int test_while() {
    int x = 5;
    int a = 5;
    int sum = 0;
    while(x != 0) {
        x = x - 1;
        if (sum <= 4*5) {
            sum = sum + a;
        }
    }
}

int test_short_circuit(int c) {
    int x = 1;
    if (x && (1 && 3)) {
        return 0;
    }
    return 1;
}

int test_proc3() {
    int a = 2;
    int b = 3;
    if (b >= 2) {
        a = 3;
    } else {
        a = 5;
    }
    return a + b;
}

int test_phi() {
    int a = 4, b;
    if (a >= 2) {
        b = 3;
    } else {
        b = 4;
    }
    return a+b;
}

// @TODO: re decl!!!!!!!!!!!!!!
// @TODO error if no argument ()
int test_proc2() {
    int a = 42;
    int b = a;
    int c = a+b;
    a = c + 23;
    c = a + 2;
    if(a >= 2) {
        b = a+2;
    } else {
        b = 44;
    }
    if (a>b) {
        a = 23;
    }
    int d = a + b;
    return d;
}

int copy() {
    int x = 5;
    int y = 1;
    while(x != 0) {
        y = x;
        x = x-1;
    }
    return y;
}

int print_odd(int n) {
    while(n >= 0) {
        n = n - 1;
        if (n < 0) break;
        if (n * 2 == 0) continue;
    }
    return n;
}

int procc(int a)
{
    int k = 1;
    return k;
}
void xws()
{
    
}

int factorial(int n) {
    if(n <= 1) {
        return 1;
    }
    return n*factorial(n-1);
}

int fib(int n) {
    if (n <= 1) { return n; }
    return fib(n-1) + fib(n-2);
}

int test_proc(int a, int b) {
    return a*b;
}

int get_sum(int a[]) {
    int sum = a[0] + a[1] + a[2] + a[3];
    return sum;
}

int get_sum2(int a[][4]) {
    int sum = a[0][0] + a[1][2];
    return sum;
}

int gcd(int a, int b) {
    int c = a;
    int d = b;
    if (c == 0) {
        return d;
    }
    while (d != 0) {
        if (c > d) c = c-d;
        else d = d-c;
    }
    return c;
}

int test_while_sccp() {
    int i = 0;
    while(i < 5) {
        i = i + 1;
    }
    return i;
}

int get_sum3(int a[5]) {
    int i = 0;
    int f = a[0] + a[1] + a[2] + a[3] + a[4];
    int sum = 0;
    while (i != 5) {
        sum = sum + a[i];
        i = i + 1;
    }
    return sum+f;
}

void test_logical()
{
    int j = 0;
    j = 1||j;
    j;
    j = 0 && j;
    j;
}

int glo = 3;
void test_const() {
    glo = 2;
    const int a = 5;
}

const int s = 3;
void test_const_expr_array() {
    int a99[2 * s][8 / 2] = { 0, 0, 3 };
    int i = 0;
    int j = 0;
    while (i < 6) {
        j = 0;
        while (j < 4) {
            a99[i][j];
            j = j + 1;
        }
        i = i + 1;
    }
}


int main() {
    int _c = 0xb;
    putint(_c);
    int a4 = 5;
    int b = 10;
    if (b == 10 && a4 == 1)
        a4 = 25;
    else if(b == 10 && a4 == -5)
        a4 = a4 + 15;
    else
        a4 = -+a4;
    putint(a4);
    int ii = 0;
    int c0[6] = {1,2,3,4,5,6};
    int xx;
    while(ii<6)
    {
        xx = c0[ii];
        putint(xx);
        ii=ii+1;
    }
    xx = 10;
    putch(xx);
    
    putint(2);
    putch(10);
    test_logical();

    test_const_expr_array();

    {
        int sum = 0;
        int i = 0;
        while(i<4) {
            int j = 0;
            //j = j + 1;
            //i;
            //j;
            sum = sum + 1;
            i=i+1;
        }
        sum;
    }

    {
        int a[4][2] = {};
        print_2d(a);
        int b[4][2] = {1,2,3,4,5,6,7,8};
        print_2d(b);
        int c[4][2] = {{1,2},{3,4},5,6,7,8};
        print_2d(c);
        int d[4][2] = {1,2,{3},{5},7,8};
        print_2d(d);
        int e[4][2] = {{d[2][1],c[2][1]},{3,4},{5,6},{7,8}};
        print_2d(e);
    }

    print_odd(15);

    gcd(60, 12);

    int acc2 = 0;
    while(true) {
        if (acc2 == 200) break;
        acc2 = acc2+1;
    }
    acc2;

    int dd[5][4];
    dd[0][0] = 2;
    dd[1][2] = 13;
    int ssss = get_sum2(dd);
    //ssss;

    //3*4+2;
    


    int a[5];
    a[0] = 1;
    a[1] = 2;
    a[2] = 3;
    a[3] = 4;
    a[4] = 5;


    int acc = 1;
    while(acc != 44) acc = acc + 1;
    acc;

    int i = 1;
    int sum4 = 0;
    while(i < 5) {
        sum4 = sum4 + a[i];
        i = i + 1;
    }
    //sum4;

    int sum3 = get_sum3(a);
    sum3;

    //index : int = 5;
    int sum = get_sum(a);
    sum;
    //while(index != 0) {
        //sum  
        //index = index - 1;
    //}

    int test_fact = factorial(5);
    test_fact;

    int fib_num = fib(2);
    fib_num;

    int test_result = 2*test_proc(2,44);
    test_result;
    test_result = 3*test_proc(2,44);
    test_result;
    int aa = 14;
    if (aa != 35) {
        aa - 1;
    }
    while(aa != 35) {
        aa = aa + 1;
        aa;
    }
    -44;
    +44;
    -23;
    int n = 5;
    {
        int n = 2;
        int a = 7*n;
        a;
        if (a == 35) {
            int b = a + 44;
            b;
        } else {
            int a = 44 * 44;
            a;
        }
    }
    //a : int = 7*n;
    //a;


    123*(2+3);
    123*(2-3);
    +45;
    1+2+3+4;
    1*2*3*4;
    1+3*3-5;
    3/3 + 5*5;
    5*5-9*9;
    44+44+44+44;
    -23;
    1+-(5*5);
    return 5;

}

*/
